# nGinx rate limiting config script by QWeb Ltd.
#
# Adds different HTTP rate limiting zones for known bots, services, and humans. Rate limiting prevents any one node from flooding your request queues, in turn stopping content scrapers and malicious parties from hogging resources and allowing your server to remain responsive to legitimate traffic.
#
# It's recommended that you use this script together with our badbot blocking config at https://github.com/qwebltd/Useful-scripts/blob/main/Bash%20scripts%20for%20Linux/nginx-badbot-forbids.conf
#
# Simply add this file to your nginx config directory, for example /etc/nginx/plesk.conf.d/ip_default/nginx-rate-limiting.conf on a Plesk server, and edit the $known_ips block below.
# Actual rates for each zone are controlled by the limit_req_zone and limit_req lines at the end. 
#
# Don't forget to reload nginx after adding or editing this file! For example, on Systemd based systems, e.g. CentOS / Redhat / Rocky / Alma etc:
# sudo systemctl reload nginx
#
# By default, this limits regular traffic to 30 requests per second, authorised humans to 60 requests per second, Nitropack servers to 4 requests per second, and known bots to 2 per second, 12 per minute, or 6 per minute dependant on their usefulness.
#
# Refer to the nGinx config documentation for how all of this works:
#  https://nginx.org/en/docs/http/ngx_http_geo_module.html
#  https://nginx.org/en/docs/http/ngx_http_limit_req_module.html
#  https://nginx.org/en/docs/http/ngx_http_map_module.html
#
# Requires ngx_http_map_module, ngx_http_geo_module, and nGinx 1.0.4 or above: https://nginx.org/en/docs/http/ngx_http_map_module.html
#
#
#

# Useragents of known bots. Map to 1 to limit them heavily, 2 to still limit more than humans but not too much, or 3 to only lightly limit.
# General rule of thumb is to be lenient towards search engines and business directories etc, because they're potentially good for lead generation, and more restrictive to less useful services.
# The purpose of this isn't to block, but to prevent resource drain. Individual websites wanting to block bots should do so via htaccess or similar
map $http_user_agent $known_bots {
	default 0;
	~*(008|AddSugarSpiderBot|AdsBot|AhrefsBot|AmazonBot|Arachmo|Barkrowler|BimBot|BlexBot|Boitho\.com|BTBot|ConveraCrawler|DiamondBot|DotBot|Earthcom\.info|EmeraldShield\.com|EsperanzaBot|FacebookBot|Fast\ Enterprise|FindLinks|FurlBot|FyberSpider|GaisBot|GigaBot|GirafaBot|GoogleOther|Go-HTTP-Client|HL_Ftien_Spider|Holmes|HTDig|ICCrawler|Ichiro|IgdeSpyder|ImageSiftBot|IonCrawl|IRLbot|ISSCyberRiskCrawler|IssueCrawler|Jaxified\ Bot|JyxoBot|KoepaBot|Kototoi\.org|Larbin|LDSpider|LinkWalker|LMSpider|Lwp-Trivial|L\.Webis|Mabontland|Magpie-Crawler|Mail\.RU_Bot|Masscan-NG|Meltwater|Meta-ExternalAgent|Mogimogi|MoreoverBot|Morning\ Paper|MSRBot|MVAClient|MXBot|NetResearchServer|NetSeer\ Crawler|NewsGator|NiceBot|NUSearch\ Spider|Nutch|Nymesis|OmniExplorer_Bot|OrbBot|OozBot|PageBitesHyperBot|Peer39_Crawler|PolyBot|PSBot|PycUrl|Qseero|Radian6|RampyBot|RufusBot|SandCrawler|SBIder|Scrapy|SeekBot|SemanticDiscovery|Semrush|Sensis\ Web\ Crawler|SEOChat|Shim-Crawler|SiteBot|Snappy|SurveyBot|Sqworm|SuggyBot|SynooBot|TerrawizBot|TheSuBot|Thumbnail\.cz|TimpiBot|TinEye|TruwoGPS|TurnItInBot|TweetedTimes\ Bot|UrlFileBot|Vagabondo|Vortex|Voyager|VYU2|WebCollage|Wf84|WomlpeFactory|Xaldon_WebSpider|Yacy|YasakliBot) 1;
	~*(AbachoBot|Accoona-AI-Agent|AnyApexBot|AwarioBot|AwarioSmartBot|AwarioRssBot|BaiduSpider|BecomeBot|BeslistBot|BlitzBot|B-l-i-t-z-B-O-T|CatchBot|CoccocBot|Cosmos|Covario|DataForSeoBot|DataparkSearch|Discobot|ExaBot|FacebookExternalHit|Fast-WebCrawler|FDSE\ Robot|GalaxyBot|GenieBot|Google-PageRenderer|GurujiBot|HappyFunBot|IAskSpider|IA_Archiver|LapozzBot|LexxeBot|Linguee\ Bot|Meta-ExternalFetcher|MJ12bot|MnogoSearch|MojeekBot|MSNBot|NG-Search|NoxtrumBot|NutchCVS|Omgili|Orbiter|PerplexityBot|PetalBot|PetalSearch|Pompos|PostPost|RogerBot|ScoutJet|Scrubby|SearchSight|SeekPortBot|ShopWiki|Shoula\ Robot|Sogou\ Spider|SosoSpider|Speedy\ Spider|StackRambler|SwiftBot|Teoma|TwengaBot|VoilaBot|WebSquash|Slurp|WoFindeIcha\ Robot|YahooSeeker|Yandex|Yeti|YodaoBot|YoudaoBot|YoogliFetchAgent|YouBot|ZealBot|ZyBorg) 2;
	~*(AppleBot|BingBot|DuckDuckBot|GoogleBot) 3;
}

# IPs we want to apply custom rates to. The value mapped to determines the zone we later apply
# Can be either individual IPs or CIDR ranges
geo $known_ips {
	default 0;

	# Nitropack servers
	46.101.77.196 1;
	157.245.30.12 1;
	178.62.71.222 1;
	178.62.81.205 1;

	# Humans
	111.222.333.444 2; # Example human
}

# Now we create variables that are either set to the requesting nodes IP, or an empty string depending on how it maps to the above lists
map "$known_bots:$known_ips" $heavily_restricted_bot {
	default "";
	"1:0" $binary_remote_addr;
}

map "$known_bots:$known_ips" $less_restricted_bot {
	default "";
	"2:0" $binary_remote_addr;
}

map "$known_bots:$known_ips" $barely_restricted_bot {
        default "";
        "3:0" $binary_remote_addr;
}

map "$known_bots:$known_ips" $nitropack_server {
	default "";
	"0:1" $binary_remote_addr;
}

map "$known_bots:$known_ips" $authorised_human {
	default "";
	"0:2" $binary_remote_addr;
}

map "$known_bots:$known_ips" $regular_ip {
	default "";
	"0:0" $binary_remote_addr;
}

# And turn these variables into rate limit zones, setting a number of requests to allow by this node per second or minute
# 10mb shared memory slots should be able to hold approx 8,000 to 160,000 IPs at any one time. Ref https://nginx.org/en/docs/http/ngx_http_limit_req_module.html
limit_req_zone $heavily_restricted_bot zone=heavily_restricted_bots:10m rate=6r/m;
limit_req_zone $less_restricted_bot zone=less_restricted_bots:10m rate=12r/m;
limit_req_zone $barely_restricted_bot zone=barely_restricted_bots:10m rate=2r/s;
limit_req_zone $nitropack_server zone=nitropack_servers:10m rate=4r/s;
limit_req_zone $authorised_human zone=authorised_humans:10m rate=60r/s;
limit_req_zone $regular_ip zone=regular_ips:10m rate=30r/s;

# Enables each rate limiting zone and sets their bursts, i.e. the number of requests allowed to be queued that exceed the above rates, which are then processed at the above rates
limit_req zone=heavily_restricted_bots burst=20;
limit_req zone=less_restricted_bots burst=20;
limit_req zone=barely_restricted_bots burst=50;
limit_req zone=nitropack_servers burst=100;
limit_req zone=authorised_humans burst=200;
limit_req zone=regular_ips burst=100;

# Requests that exceed the rate and don't fit in the burst queue are dropped
limit_req_status 429;
